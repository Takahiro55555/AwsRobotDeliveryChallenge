#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import json
from std_msgs.msg import String
from tf.transformations import euler_from_quaternion, quaternion_from_euler
from tf import TransformListener
from nav_msgs.msg import Odometry
from rosgraph_msgs.msg import Log
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from geometry_msgs.msg import Quaternion

class Commander():
    def __init__(self):
        self._odom_sub = rospy.Subscriber('/odom', Odometry, self.print_odom_cb, queue_size=1)
        self._rosout_sub = rospy.Subscriber('/rosout', Log, self.detect_start_cb, queue_size=1)

    def main(self):
        rospy.spin()

    def print_odom_cb(self, message):
        pass

    def detect_start_cb(self, message):
        pass

'''
class Navigation():
    def __init__(self):
        self._remote_sub = rospy.Subscriber('/awsiot_to_ros', String, self.awsiot_to_ros_cb, queue_size=1)

    def main(self):
        rospy.spin()

    def awsiot_to_ros_cb(self, message):
        try:
            message_json = json.loads(message.data)
            payload = message_json['payload']
            if 'command' in payload and payload['command'] == "navigation":
                if 'action' in payload and payload['action'] == 'setGoal':

                    goal_x = float(payload['x'])
                    goal_y = float(payload['y'])
                    goal_yaw = float(payload['yaw'])

                    rospy.loginfo("Navigatoin setGoal {} {} {}".format(goal_x, goal_y, goal_yaw))

                    listener = TransformListener()

                    client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
                    client.wait_for_server()
                    listener.waitForTransform("map", "base_link", rospy.Time(), rospy.Duration(6.0))

                    q = quaternion_from_euler(0,0,goal_yaw)

                    goal_pose = MoveBaseGoal()
                    goal_pose.target_pose.header.frame_id = 'map'
                    goal_pose.target_pose.pose.position.x = goal_x
                    goal_pose.target_pose.pose.position.y = goal_y
                    goal_pose.target_pose.pose.position.z = 0
                    goal_pose.target_pose.pose.orientation = Quaternion(x=q[0], y=q[1], z=q[2], w=q[3])

                    client.send_goal(goal_pose)

        except Exception as e:
            rospy.logwarn("navigation request failed")
            rospy.logwarn(e)
'''
                
def main():
    rospy.init_node('commander')
    commander = Commander()
    commander.main()        

if __name__ == '__main__':
    main()
