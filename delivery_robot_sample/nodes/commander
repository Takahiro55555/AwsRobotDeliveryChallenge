#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# このノードは navigation スタックへの操作を経路ファイルから行います
# 

import os
import rospy
import json
import time
from std_msgs.msg import String
# from tf.transformations import euler_from_quaternion, quaternion_from_euler
# from tf import TransformListener
from nav_msgs.msg import Odometry
from rosgraph_msgs.msg import Log
# import actionlib
# from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
# from geometry_msgs.msg import Quaternion

class Commander():
    def __init__(self):
        self._rosout_sub = rospy.Subscriber("/rosout", Log, self.rosout_cb, queue_size=1)
        self._odom_sub = rospy.Subscriber("/odom", Odometry, self.odom_cb, queue_size=1)
        self._awsiot_to_ros_pub = rospy.Publisher("/awsiot_to_ros", String, queue_size=1)
        
        self._current_step = 0
        self._is_started = False
        self._is_sended = False
        self._is_goal = False
        
    def main(self):
        rospy.spin()

    def rosout_cb(self, data):
        # rospy.get_param("/step")
        try:
            if "Start time" in data.msg:
                rospy.loginfo("detect start!!")
                self._is_started = True
                self._is_sended = False
                self._is_goal = False
                self._current_step = 0
        except Exception as e:
            rospy.logwarn("start detecter request failed")
            rospy.logwarn(e)
    
    def odom_cb(self, data):
        try:
            payload = {}
            if self._is_goal: return
            if not self._is_started: return
            if not self._is_sended:
                request_id =  time.time()
                payload["command"] = "navigation"
                payload["action"] = "setGoal"
                payload["request_id"] = request_id
                payload["x"] = rospy.get_param("/step")[self._current_step]["x"]
                payload["y"] = rospy.get_param("/step")[self._current_step]["y"]
                payload["yaw"] = 0
                self._awsiot_to_ros_pub.publish(json.dumps({"payload":payload}))
                self._is_sended = True
            s_x, s_y = rospy.get_param("/step")[self._current_step]["x"], rospy.get_param("/step")[self._current_step]["y"]
            r_x, r_y = data.pose.pose.position.x, data.pose.pose.position.y
            error = ((r_x - s_x)**2 + (r_y - s_y)**2)
            rospy.loginfo("Current step: %d, Error: %f" % (self._current_step, (error)**0.5))
            if error < rospy.get_param("/step")[self._current_step]["tolerance"]**2:
                self._current_step += 1
                self._is_sended = False
                if len(rospy.get_param("/step")) <= self._current_step:
                    self._is_goal = True
                    rospy.loginfo("Is Goal!!!!!!!!")


        except Exception as e:
            rospy.logwarn("command publisher request failed")
            rospy.logwarn(e)

def main():
    rospy.init_node('commander')
    commander = Commander()
    commander.main()        

if __name__ == '__main__':
    main()
