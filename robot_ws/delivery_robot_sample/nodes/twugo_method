#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

# Copy right 2020 Takuya TWUGO all right reseved

#
# This node enable you to control robot moving velocity from cloud using AWS IoT.
#
# このノードは とぅーぐーメソッドでできています
#

import rospy
import json
from geometry_msgs.msg import Twist
from std_msgs.msg import String
from nav_msgs.msg import Odometry
import time
import tf
from geometry_msgs.msg import Vector3
import math

LINERAR_MAX_SPEED = 0.22
ANGULER_MAX_SPEED = 2.84


class TwugoMethod():
    def __init__(self):
        # ROS Publisher
        self._cmd_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
        self._remoteconsole_update_status_pub = rospy.Publisher(
            "/remote_console/update_status", String, queue_size=1)

        # ROS Subscriber
        self._odom_sub = rospy.Subscriber(
            "/odom", Odometry, self.odom_cb, queue_size=1)
        self._twugo_method_sub = rospy.Subscriber(
            "/twugo_method", String, self.twugo_method_cb, queue_size=1)
        self._restart_method_sub = rospy.Subscriber(
            "/twugo_method/restart", String, self.restart_cb, queue_size=1)

        self._twist = Twist()
        self._next_synctime = time.time()
        self._is_stoped = False
        self._is_started = False
        self._is_before_destination = False  # 目標地点に到達する前に停止しないようにするためのフラグ
        self._is_retry_rotating = False      # リトライするときにロボットをスタート地点で正面を向かせるためのフラグ
        self._is_goto_mode = False
        self._turn_p = 0.95
        self._x_goal = 0
        self._y_goal = 0
        self._odom = None

        # gameMode関連
        self.__game_mode_list = {
            "main": "GAME_MODE_IS_MAIN",  # 本戦モード
            "final": "GAME_MODE_IS_FINAL"  # 決勝戦モード
        }
        self.__current_game_mode = None

    def main(self):
        while not rospy.is_shutdown():
            d = self._next_synctime - time.time()
            if d <= 0:
                continue
            time.sleep(d)

    def twugo_method_cb(self, data):
        payload = json.loads(data.data)
        if self.__current_game_mode == self.__game_mode_list["main"]:
            if "is_goal" in payload and payload["is_goal"]:
                self._is_started = False
                return
            elif "is_interrupted" in payload and payload["is_interrupted"]:
                self._is_started = False
                if "mode" not in payload:
                    rospy.logerr("[TwugoMethod::set_goal] メッセージに 'mode' が設定されていません。")
                    return
                if payload["mode"] == "stop":
                    self._is_goto_mode = False
                    self._remoteconsole_update_status_pub.publish(json.dumps({"status": "stop"}))
                    return
                if payload["mode"] == "manual":
                    self._is_goto_mode = False
                    self._remoteconsole_update_status_pub.publish(json.dumps({"status": "manual"}))
                    return
                if payload["mode"] == "goto":
                    if "point" not in payload:
                        rospy.logwarn("[Commander::__remote_console_cb] GoToするためには、目標座標とtolerance が設定された'point'が必要です")
                        return
                    point = payload["point"]
                    if ("x" not in point) or ("y" not in point) or ("tolerance" not in point):
                        rospy.logwarn("[Commander::__remote_console_cb] 'point' に次のいずれかの値が設定されていません。'x', 'y', 'tolerance'")
                        return
                    self._is_goto_mode = True
                    self._x_goto = float(point["x"])
                    self._y_goto = float(point["y"])
                    self._tolerance_goto = float(point["tolerance"])
                    self._remoteconsole_update_status_pub.publish(json.dumps({"status": "goto", "point": point}))
                return
            elif self._is_before_destination:
                self._is_started = False
            
            self._is_before_destination = payload["is_destination"]

        elif self.__current_game_mode == self.__game_mode_list["final"]:
            payload = json.loads(data.data)
            if  payload["is_goal"]:
                self._is_started = False
                return

        self._x_goal = payload["x"]
        self._y_goal = payload["y"]

    def restart_cb(self, data):
        """
        チェックポイントで停止しているロボットを再スタートさせるためのハンドラ

        以下、再スタートさせる際のコマンドの例
        $ rostopic pub --once -v /twugo_method/restart std_msgs/String '{data: "hoge"}'
        """

        payload = json.loads(data.data)
        if "gameMode" in payload:
            self.__current_game_mode = payload["gameMode"]

        # retryするとき、正面を向かせる。
        if "data" in payload and payload["data"] == "is_retry":
            rospy.loginfo('[TwugoMethod] Retry now.')
            self._is_retry_rotating = True
            self._is_started = False  # ゴール後にリスタートボタンが押され、このフラグが立ったままになってしまうことがある
            return

        self._is_started = True

    def odom_cb(self, data):
        self._odom = data
        self._next_synctime = time.time() + 0.3

        # リトライのために正面を向かせる処理
        if self._is_retry_rotating:
            self.rotate_robot(1.0, 0.0)
            return

        if self._is_goto_mode:
            robo_x, robo_y = self._odom.pose.pose.position.x, self._odom.pose.pose.position.y
            error = ((robo_x - self._x_goto)**2 + (robo_y - self._y_goto)**2)
            if error < (self._tolerance_goto**2)*2:
                self._is_goto_mode = False
            else:
                self.goto_point(self._x_goto, self._y_goto)
                return

        if not self._is_started and not self._is_stoped:
            self._twist.linear.x = 0
            self._twist.angular.z = 0
            self._cmd_pub.publish(self._twist)
            self._is_stoped = True

        if not self._is_started:
            return

        self.goto_point(self._x_goal, self._y_goal)

    def goto_point(self, x, y):
        if self._odom == None:
            rospy.logwarn('[TwugoMethod().goto_point]odom is null.')
            return
        r_x, r_y = self._odom.pose.pose.position.x, self._odom.pose.pose.position.y
        r_ang_qua = tf.transformations.euler_from_quaternion([
            self._odom.pose.pose.orientation.x, self._odom.pose.pose.orientation.y,
            self._odom.pose.pose.orientation.z, self._odom.pose.pose.orientation.w])
        r_ang = r_ang_qua[2]
        atan2_tmp = math.atan2(y - r_y, x - r_x)
        ang_diff = math.atan2(math.sin(atan2_tmp - r_ang),
                              math.cos(atan2_tmp - r_ang))

        back_ang_diff = self.sign(ang_diff) * math.pi - ang_diff
        if self.__current_game_mode == self.__game_mode_list["main"]:
            speed_zero_ang_threshold = math.pi/10
        elif self.__current_game_mode == self.__game_mode_list["final"]:
            speed_zero_ang_threshold = float("inf")

        if abs(ang_diff) < math.pi/2:
            linear_speed = LINERAR_MAX_SPEED*(1-abs(ang_diff)/math.pi)
            if abs(ang_diff) > speed_zero_ang_threshold:
                linear_speed = 0
            self._twist.linear.x = min([LINERAR_MAX_SPEED, linear_speed])
            turn_speed = ang_diff * self._turn_p
            self._twist.angular.z = self.sign(turn_speed) * min([ANGULER_MAX_SPEED, abs(turn_speed)])
        else:
            linear_speed = LINERAR_MAX_SPEED*(1-abs(back_ang_diff)/math.pi)
            if abs(back_ang_diff) > speed_zero_ang_threshold:
                linear_speed = 0
            self._twist.linear.x = -min([LINERAR_MAX_SPEED, linear_speed])
            turn_speed = back_ang_diff * self._turn_p
            self._twist.angular.z = -self.sign(turn_speed) * min([ANGULER_MAX_SPEED, abs(turn_speed)])

        self._cmd_pub.publish(self._twist)
        self._is_stoped = False

    def rotate_robot(self, x, y):           # x, yは向かせたい座標
        if self._odom == None:
            rospy.logwarn('[TwugoMethod().goto_point]odom is null.')
            return
        r_x, r_y = self._odom.pose.pose.position.x, self._odom.pose.pose.position.y
        r_ang_qua = tf.transformations.euler_from_quaternion([
            self._odom.pose.pose.orientation.x, self._odom.pose.pose.orientation.y,
            self._odom.pose.pose.orientation.z, self._odom.pose.pose.orientation.w])
        r_ang = r_ang_qua[2]
        atan2_tmp = math.atan2(y - r_y, x - r_x)
        ang_diff = math.atan2(math.sin(atan2_tmp - r_ang),
                              math.cos(atan2_tmp - r_ang))
        turn_speed = ang_diff * self._turn_p
        if abs(ang_diff) < math.pi/15:
            self._is_retry_rotating = False
        self._twist.linear.x = 0
        self._twist.angular.z = self.sign(
            turn_speed) * min([ANGULER_MAX_SPEED, abs(turn_speed)])
        self._cmd_pub.publish(self._twist)
        self._is_stoped = False
        

    def judge_is_on_line(self, p1_x, p1_y, p2_x, p2_y):
        if self._odom == None:
            rospy.logwarn('[TwugoMethod().judge_is_on_line]odom is null.')
            return

        tolerance = 0.1
        x, y = self._odom.pose.pose.position.x, self._odom.pose.pose.position.y
        
        # 点(x,y)がp1, p2, (min(p1.x,p2.x),min(p1.y,p2.y)), (max(p1.x,p2.x),max(p1.y,p2.y))
        # を頂点とする長方形に内在するか考える　直線でなく線分で判定するため
        if not (min(p1_x, p2_x)-tolerance <= x and x <= max(p1_x, p2_x)+tolerance \
            and min(p1_y, p2_y)-tolerance <= y and y <= max(p1_y, p2_y)+tolerance):
            return

        # ベクトルを使ってロボットと直線の距離を求める
        dist_between_p = math.sqrt((p2_x - p1_x)**2 + (p2_y - p1_y)**2)
        e_x = (p2_x - p1_x) / dist_between_p
        e_y = (p2_y - p1_y) / dist_between_p
        dist = abs((x - p1_x)*e_y - (y - p2_y)*e_x)

        if dist < tolerance:
            rospy.loginfo('Robot is on a check-line!')
        return     

    @staticmethod
    def sign(x):
        return (x > 0) - (x < 0)


def main():
    rospy.init_node('twugo_method')
    remote_controller = TwugoMethod()
    remote_controller.main()


if __name__ == '__main__':
    main()