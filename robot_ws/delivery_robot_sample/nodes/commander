#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# このノードは navigation スタックへの操作を経路ファイルから行います
#

import rospy
import json
from std_msgs.msg import String
from nav_msgs.msg import Odometry
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point


class Commander():
    def __init__(self):
        # ROS Publisher
        self._odom_sub = rospy.Subscriber(
            "/odom", Odometry, self.odom_cb, queue_size=1)
        self._path_sub = rospy.Subscriber(
            "/planner/path", String, self.path_cb, queue_size=1)
        self._obstacle_detect_sub = rospy.Subscriber(
            "/obstacle_detector/msg", String, self.obstacle_detect_cb, queue_size=1)
        self._remote_console_sub = rospy.Subscriber(
            '/remote_console/to_commander', String, self.__remote_console_cb, queue_size=1)
        
        # ROS Subscriber
        self._twugo_method_pub = rospy.Publisher(
            "/twugo_method", String, queue_size=1)
        self._planner_pub = rospy.Publisher(
            "/commander/meta_info", String, queue_size=1)
        self._twugo_method_restart_pub = rospy.Publisher(
            "/twugo_method/restart", String, queue_size=1)
        self._marker_pub = rospy.Publisher(
            "/way_line", Marker, queue_size=10)

        # Member variable
        self._current_step = None
        self._step = []
        self._is_started = False
        self._is_sended = False
        self._is_goal = False

    def main(self):
        rospy.spin()

    def __remote_console_cb(self, data):
        payload = json.loads(data.data)
        if "action" in payload:
            if payload["action"] == "start":
                rospy.loginfo("detect start!!")
                self._is_started = True
                self._is_sended = False
                self._is_goal = False
                self._current_step = 0
                planner_payload = {}
                planner_payload["is_started"] = self._is_started
                self._planner_pub.publish(json.dumps(planner_payload))
                self._twugo_method_restart_pub.publish(json.dumps({"data": "is_start"}))

            if payload["action"] == "restart" and self._is_started:
                rospy.loginfo("detect restart!!")
                self._twugo_method_restart_pub.publish(json.dumps({"data": "is_restart"}))
                
    def path_cb(self, data):
        payload = json.loads(data.data)
        # rospy.loginfo("[On commander][payload] %s" % payload)
        self._step = payload
        self._current_step = 0

    def odom_cb(self, data):
        try:
            payload = {}
            if self._current_step == None:
                return
            if self._is_goal:
                return
            if not self._is_started:
                return
            if not self._is_sended:
                payload["x"] = self._step[self._current_step]["x"]
                payload["y"] = self._step[self._current_step]["y"]
                payload["pre_x"] = self._step[self._current_step-1]["x"]
                payload["pre_y"] = self._step[self._current_step-1]["y"]
                payload["is_goal"] = self._is_goal
                payload["is_destination"] = self._step[self._current_step]["is_destination"]
                self._twugo_method_pub.publish(json.dumps(payload))
                self._is_sended = True
            s_x, s_y = self._step[self._current_step]["x"], self._step[self._current_step]["y"]
            r_x, r_y = data.pose.pose.position.x, data.pose.pose.position.y
            error = ((r_x - s_x)**2 + (r_y - s_y)**2)
            
            if error < (self._step[self._current_step]["tolerance"]**2)*2:
                planner_payload = dict(
                    is_destination=self._step[self._current_step]["is_destination"],
                    vertex_id=self._step[self._current_step]["vertex_id"]
                )
                self._planner_pub.publish(json.dumps(planner_payload))

                if self._step[self._current_step]["is_destination"]:
                    rospy.loginfo("HELLO!!! This is Amazon!!!!")
                
                self._current_step += 1
                self._is_sended = False
                rospy.loginfo("Current step: %d" % self._current_step)
                if len(self._step) <= self._current_step:
                    self._is_goal = True
                    payload["is_goal"] = self._is_goal
                    self._twugo_method_pub.publish(json.dumps(payload))
                    rospy.loginfo("Is Goal!!!!!!!!")

            # ここは走行経路表示
            if not self._current_step is 0:
                marker_data = Marker()
                marker_data.header.frame_id = "map"
                marker_data.header.stamp = rospy.Time.now()
                marker_data.ns = "basic_shapes"
                marker_data.action = Marker.ADD
                marker_data.type = Marker.LINE_STRIP

                marker_data.pose.orientation.x = 0.0
                marker_data.pose.orientation.y = 0.0
                marker_data.pose.orientation.z = 1.0
                marker_data.pose.orientation.w = 0.0

                marker_data.color.r = 1.0
                marker_data.color.g = 0.0
                marker_data.color.b = 0.0
                marker_data.color.a = 1.0

                marker_data.scale.x = 0.01

                marker_data.points = []
                p1 = Point()
                p1.x = -data.pose.pose.position.x
                p1.y = -data.pose.pose.position.y
                p1.z = 0.0
                marker_data.points.append(p1)
                p2 = Point()
                p2.x = -self._step[self._current_step]["x"]
                p2.y = -self._step[self._current_step]["y"]
                p2.z = 0.0
                marker_data.points.append(p2)

                self._marker_pub.publish(marker_data)

        except Exception as e:
            rospy.logwarn("command publisher request failed")
            rospy.logwarn(e)


    def obstacle_detect_cb(self, data):
        planner_payload = dict(
                remove_edge_request=True,
                pre_vertex_id=self._step[self._current_step - 1]["vertex_id"],
                vertex_id=self._step[self._current_step]["vertex_id"],
            )
        self._planner_pub.publish(json.dumps(planner_payload))

def main():
    rospy.init_node('commander')
    commander = Commander()
    commander.main()


if __name__ == '__main__':
    main()
