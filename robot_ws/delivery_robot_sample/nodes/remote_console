#!/usr/bin/env python
# -*- coding: utf-8 -*-

from awsiot_client import Mqtt

import rospy
from std_msgs.msg import String
from nav_msgs.msg import OccupancyGrid, Odometry

import numpy as np

import os
import types
import json
import yaml


class RemoteConsole():
    def __init__(self, config, mqtt_subscribe_topic_prefix='remote_console_to_tros',
                 mqtt_publish_topic_prefix='ros_to_remote_console'):
        # AWS IoT Settings
        self.__thing_name = config["thingName"]
        self.__mqtt_subscribe_topic_prefix = mqtt_subscribe_topic_prefix
        self.__mqtt_publish_topic_prefix = mqtt_publish_topic_prefix

        # AWS IoT Subscriber
        #   NOTE: Subscribe する Topic と対応するコールバック関数は、2つをまとめた辞書のリストを Mqtt クラスのコンストラクタに渡すことで設定する
        subscribe_cb_list = []
        subscribe_cb_list.append({"topic": self.__thing_name + "/remote_console_to_ros/buttons", "cb": self.__button_cb})
        subscribe_cb_list.append({"topic": self.__thing_name + "/remote_console_to_ros/request_data", "cb": self.__request_data_cb})
        self.__mqtt_client = Mqtt(config, subscribe_cb_list=subscribe_cb_list)

        # AWS IoT には retain 機能が無いため、こちら側で最後に Publish したデータを保持しておく
        self.__trimed_global_costmap_pub_data = None
        self.__odom_pub_data = None
        self.__trimed_merged_costmap_pub_data = None
        self.__trimed_local_costmap_pub_data = None
        self.__map_graph_pub_data = None
        self.__path_pub_data = None
        self.__status_list = {  # ロボットがとりうる状態
            "initializing": {"status": "initializing" , "msg": "初期化処理中 >>>走行不能<<<", "isGoto": False},
            "ready": {"status": "ready" , "msg": "走行可能（スタート可能）", "isGoto": False},
            "running": {"status": "running" , "msg": "走行中（停止・手動操作可能）", "isGoto": False},
            "delivery": {"status": "delivery" , "msg": "配達ポイントへ到着（リスタート・手動操作可能）", "isGoto": False},
            "goal": {"status": "goal" , "msg": "ゴールへ到着（リトライ・手動操作可能）", "isGoto": False},
            "stop": {"status": "stop" , "msg": "停止中（リスタート・手動操作可能）", "isGoto": False},
            "manual": {"status": "manual" , "msg": "手動操作中（リスタート可能）", "isGoto": False},
            "error": {"status": "error" , "msg": "エラー発生 >>>走行不能<<<", "isGoto": False},
            "terminating": {"status": "terminating" , "msg": "終了中 >>>走行不能<<<", "isGoto": False},
        }
        self.__game_mode_list = {
            "main": "GAME_MODE_IS_MAIN",  # 本戦モード
            "final": "GAME_MODE_IS_FINAL"  # 決勝戦モード
        }
        self.__current_status = self.__status_list["initializing"]  # 現在のロボットの状態を保持する
        self.__current_game_mode = self.__game_mode_list["main"]  # 現在のゲームモードを保持する

        # AWS IoT へ各種データを Publish する関数
        #   NOTE: 辞書にまとめておくと、すべてのデータを Publish したいときに便利
        self.__data_publish_funcs = {}  # AWS IoT へデータを Publish する関数をまとめた辞書
        self.__data_publish_funcs['currentStatus'] = self.__publish_current_status_to_aws_iot
        self.__data_publish_funcs['globalCostmap'] = self.__publish_trimed_global_costmap_to_aws_iot
        self.__data_publish_funcs['odom'] = self.__publish_odom_to_aws_iot
        self.__data_publish_funcs['path'] = self.__publish_path_to_aws_iot
        self.__data_publish_funcs['localCostmap'] = self.__publish_trimed_local_costmap_to_aws_iot
        self.__data_publish_funcs['mapGraph'] = self.__publish_map_graph_to_aws_iot

        # ROS Publisher
        #   NOTE: latch=True にすると、新たな Subscriber が一番最後に Publish されたメッセージを受信できるようになる
        self.__twugo_method_pub = rospy.Publisher('/twugo_method', String, queue_size=1, latch=True)
        self.__to_commander_pub = rospy.Publisher('/remote_console/to_commander', String, queue_size=1, latch=True)

        # ROS Subscriber
        self.__trimed_local_costmap_sub = rospy.Subscriber("/obstacle_detector/local_costmap/trimed", OccupancyGrid, self.__trimed_local_costmap_cb, queue_size=1)
        self.__trimed_global_costmap_sub = rospy.Subscriber("/obstacle_detector/global_costmap/trimed", OccupancyGrid, self.__trimed_global_costmap_cb, queue_size=1)
        self.__odom_sub = rospy.Subscriber("/odom", Odometry, self.__odom_cb, queue_size=1)
        self.__map_graph_sub = rospy.Subscriber("/planner/map_graph", String, self.__map_graph_cb, queue_size=1)
        self.__map_graph_sub = rospy.Subscriber("/planner/path", String, self.__path_cb, queue_size=1)
        self.__robot_status_sub = rospy.Subscriber("/remote_console/update_status", String, self.__robot_status_cb, queue_size=1)


    def main(self):
        rospy.spin()

    ############ AWS IoT callback hundler ############
    def __button_cb(self, client, userdata, message):
        data = {}
        data['payload'] = json.loads(message.payload)
        data['topic'] = message.topic
        payload = data['payload']

        if "gameMode" in payload:
            game_mode = payload["gameMode"]
            if game_mode in self.__game_mode_list.values():
                self.__current_game_mode = game_mode
                rospy.loginfo("[RemoteConsole::__button_cb] gameMode: %s" % game_mode)
            else:
                rospy.logwarn("[RemoteConsole::__button_cb] gameMode: %s は定義されていません" % game_mode)

        if "buttonName" not in payload:
            rospy.logwarn("[RemoteConsole::__button_cb] メッセージに 'buttonName' がありません。")
            return

        if payload["buttonName"] == "btn-start" and payload["isClicked"]:
            pub_data = json.dumps({"action": "start", "gameMode": self.__current_game_mode})
            self.__to_commander_pub.publish(pub_data)
            rospy.loginfo("[RemoteConsole::__button_cb] btn-start published: %s" % pub_data)
            #TODO: Game mode を反映する処理を書く
        
        if payload["buttonName"] == "btn-restart" and payload["isClicked"]:
            pub_data = json.dumps({"action": "restart"})
            self.__to_commander_pub.publish(pub_data)
            rospy.loginfo("[RemoteConsole::__button_cb] btn-restart published: %s" % pub_data)

        if payload["buttonName"] == "btn-stop" and payload["isClicked"]:
            pub_data = json.dumps({"is_interrupted": True, "mode": "stop"})
            self.__twugo_method_pub.publish(pub_data)
            rospy.loginfo("[RemoteConsole::__button_cb] btn-stop published: %s" % pub_data)

        if payload["buttonName"] == "btn-retry-game" and payload["isClicked"]:
            pub_data = json.dumps({"action": "retryGame"})
            self.__to_commander_pub.publish(pub_data)
        
        if payload["buttonName"] == "btn-goto" and payload["isClicked"]:
            if "point" not in payload:
                rospy.logwarn("[RemoteConsole::__button_cb] GoToするためには、目標座標とtolerance が設定された'point'が必要です")
                return
            pub_data = json.dumps({"is_interrupted": True, "mode": "goto", "point": payload["point"]})
            self.__twugo_method_pub.publish(pub_data)
            rospy.loginfo("[RemoteConsole::__button_cb] btn-stop published: %s" % pub_data)

    def __request_data_cb(self, client, userdata, message):
        data = {}
        data['payload'] = json.loads(message.payload)
        data['topic'] = message.topic
        payload = data['payload']
        
        if not type(payload) is types.DictionaryType:
            rospy.logwarn("[RemoteConsole::__request_data_cb] Request message format is not valid. 辞書型である必要があります。")
            return
        if not 'requestDataList' in payload:
            rospy.logwarn("[RemoteConsole::__request_data_cb] Request message format is not valid. メッセージ中に 'requestDataList' がありません。")
            return
        if not type(payload['requestDataList']) is types.ListType:
            rospy.logwarn("[RemoteConsole::__request_data_cb] Request message format is not valid. 'requestDataList' のフォーマットはListである必要があります。")
            return
        if 'all' in payload['requestDataList']:
            for func in self.__data_publish_funcs.values():
                func()
            return
        for key in payload['requestDataList']:
            if key in self.__data_publish_funcs:
                self.__data_publish_funcs[key]()
            else:
                rospy.logwarn("[RemoteConsole::__request_data_cb] Requested data (%s) is not found." % key)
        

    ############ ROS Topic callback hundler ############
    def __trimed_global_costmap_cb(self, data):
        h, w = data.info.height, data.info.width
        costmap_array = [[int(pix) for pix in row] for row in np.array(data.data, dtype='uint8').reshape(h, w)]

        # OccupancyGrid オブジェクトのままでは、JSON文字列に変換できないため辞書型に無理やり変換
        self.__trimed_global_costmap_pub_data = dict(
            info = dict(
                height = h,
                width = w,
                resolution = data.info.resolution,
                origin = dict(
                    position = dict(
                        x = data.info.origin.position.x,
                        y = data.info.origin.position.y,
                        z = data.info.origin.position.z
                    ),
                    orientation = dict(
                        x = data.info.origin.orientation.x,
                        y = data.info.origin.orientation.y,
                        z = data.info.origin.orientation.z,
                        w = data.info.origin.orientation.w
                    )
                )
            ),
            data = costmap_array
        )
        self.__publish_trimed_global_costmap_to_aws_iot()

    def __odom_cb(self, data):
        if self.__current_status["status"] == self.__status_list["initializing"]["status"]:
            self.__current_status = self.__status_list["ready"]
            self.__publish_current_status_to_aws_iot()
        self.__odom_pub_data = dict(
            pose = dict(
                pose = dict(
                    position = dict(
                        x = data.pose.pose.position.x,
                        y = data.pose.pose.position.y,
                        z = data.pose.pose.position.z
                    ),
                    orientation = dict(
                        x = data.pose.pose.orientation.x,
                        y = data.pose.pose.orientation.y,
                        z = data.pose.pose.orientation.z,
                        w = data.pose.pose.orientation.w
                    )
                ),
                covariance = data.pose.covariance
            ),
            twist = dict(
                twist = dict(
                    linear = dict(
                        x = data.twist.twist.linear.x,
                        y = data.twist.twist.linear.y,
                        z = data.twist.twist.linear.z
                    ),
                    angular = dict(
                        x = data.twist.twist.angular.x,
                        y = data.twist.twist.angular.y,
                        z = data.twist.twist.angular.z
                    )
                ),
                covariance = data.twist.covariance
            )
        )
        self.__publish_odom_to_aws_iot()

    def __path_cb(self, data):
        self.__current_status = self.__status_list["running"]
        self.__publish_current_status_to_aws_iot()
        try:
            payload = json.loads(data.data)
        except Exception as e:
            rospy.logerr("RemoteConsole::__path_cb %s" % e)
            return
        self.__path_pub_data = payload
        self.__publish_path_to_aws_iot()

    def __robot_status_cb(self, data):
        payload = json.loads(data.data)
        if "status" not in payload:
            rospy.logerr("RemoteConsole::__robot_status_cb KEY 'status' がありません")
            return
        status = payload["status"]
        if (status not in self.__status_list) and (status != "goto"):
            rospy.logerr("RemoteConsole::__robot_status_cb '%s' は定義されていない「状態」です" % status)
            return
        if (self.__current_status["status"] == "goal" or self.__current_status["status"] == "ready") and (status == "manual" or status == "stop" or status == "running"):
            # status がゴールのまま、手動操作や停止処理が実行されても、status の変更は行わない
            return
        if status in self.__status_list:
            self.__current_status = self.__status_list[status]
            self.__current_status["isGoto"] = False
        if status == "goto":
            self.__current_status["isGoto"] = True
            if "point" in payload:
                point = payload["point"]
                if ("x" not in point) or ("y" not in point) or ("tolerance" not in point):
                    rospy.logwarn("[Commander::__remote_console_cb] 'point' に次のいずれかの値が設定されていません。'x', 'y', 'tolerance'")
                else:
                    self.__current_status["point"] = point
            else:
                rospy.logwarn("[Commander::__remote_console_cb] GoToするためには、目標座標とtolerance が設定された'point'が必要です")

        self.__publish_current_status_to_aws_iot()

    def __trimed_local_costmap_cb(self, data):
        h, w = data.info.height, data.info.width
        costmap_array = [[int(pix) for pix in row] for row in np.array(data.data, dtype='uint8').reshape(h, w)]

        # OccupancyGrid オブジェクトのままでは、JSON文字列に変換できないため辞書型に無理やり変換
        self.__trimed_local_costmap_pub_data = dict(
            info = dict(
                height = h,
                width = w,
                resolution = data.info.resolution,
                origin = dict(
                    position = dict(
                        x = data.info.origin.position.x,
                        y = data.info.origin.position.y,
                        z = data.info.origin.position.z
                    ),
                    orientation = dict(
                        x = data.info.origin.orientation.x,
                        y = data.info.origin.orientation.y,
                        z = data.info.origin.orientation.z,
                        w = data.info.origin.orientation.w
                    )
                )
            ),
            data = costmap_array
        )
        self.__publish_trimed_local_costmap_to_aws_iot()

    def __map_graph_cb(self, data):
        self.__map_graph_pub_data = data.data
        self.__publish_map_graph_to_aws_iot()


    ############ AWS IoT publish sub-routine ############
    def __publish_current_status_to_aws_iot(self):
        if self.__current_status is None:
            rospy.logwarn("[RemoteConsole::__publish_current_status_to_aws_iot] __current_status is None, so can not publish data.")
            return
        self.__current_status["gameMode"] = self.__current_game_mode
        pub_topic = "%s/%s/remote_console/current_status" % (self.__thing_name, self.__mqtt_publish_topic_prefix)
        self.__mqtt_client.mqtt_publish(self.__current_status, pub_topic)

    def __publish_trimed_global_costmap_to_aws_iot(self):
        if self.__trimed_global_costmap_pub_data is None:
            rospy.logwarn("[RemoteConsole::__publish_trimed_global_costmap_to_aws_iot] __global_costmap_pub_data is None, so can not publish data.")
            return
        pub_topic = "%s/%s/global_costmap/trimed" % (self.__thing_name, self.__mqtt_publish_topic_prefix)
        self.__mqtt_client.mqtt_publish(self.__trimed_global_costmap_pub_data, pub_topic)
        rospy.loginfo("[RemoteConsole::__publish_trimed_global_costmap_to_aws_iot] published global costmap")

    def __publish_odom_to_aws_iot(self):
        if self.__odom_pub_data is None:
            rospy.logwarn("[RemoteConsole::__publish_odom_to_aws_iot] __odom_pub_data is None, so can not publish data.")
            return
        pub_topic = "%s/%s/odom" % (self.__thing_name, self.__mqtt_publish_topic_prefix)
        self.__mqtt_client.mqtt_publish(self.__odom_pub_data, pub_topic)

    def __publish_path_to_aws_iot(self):
        if self.__path_pub_data is None:
            rospy.logwarn("[RemoteConsole::__publish_path_to_aws_iot] __path_data is None, so can not publish data.")
            return
        pub_topic = "%s/%s/planner/path" % (self.__thing_name, self.__mqtt_publish_topic_prefix)
        self.__mqtt_client.mqtt_publish(self.__path_pub_data, pub_topic)

    def __publish_trimed_local_costmap_to_aws_iot(self):
        if self.__trimed_local_costmap_pub_data is None:
            rospy.logwarn("[RemoteConsole::__publish_trimed_local_costmap_to_aws_iot] __local_costmap_pub_data is None, so can not publish data.")
            return
        pub_topic = "%s/%s/local_costmap/trimed" % (self.__thing_name, self.__mqtt_publish_topic_prefix)
        self.__mqtt_client.mqtt_publish(self.__trimed_local_costmap_pub_data, pub_topic)

    def __publish_map_graph_to_aws_iot(self):
        if self.__map_graph_pub_data is None:
            rospy.logwarn("[RemoteConsole::__publish_map_graph_to_aws_iot] __map_graph_pub_data is None, so can not publish data.")
            return
        pub_topic = "%s/%s/planner/map_graph" % (self.__thing_name, self.__mqtt_publish_topic_prefix)
        self.__mqtt_client.mqtt_publish_str(self.__map_graph_pub_data, pub_topic)


def main():
    rospy.init_node('remote_console')

    # AWS IoT の設定を読み込む
    config = {}
    config_file = rospy.get_param("/aws_game_manager/aws_iot_config_file")
    if config_file == "use_default":
        config_file = rospy.get_param("/aws_game_manager/aws_iot_config_file_default")

    with open(config_file, 'r') as f:
        try:
            config = yaml.safe_load(f)
        except yaml.YAMLError as exc:
            rospy.logerr("[ERROR][remote_sonsole] yaml read error")
    config["configFilePath"] = os.path.dirname(config_file)

    remote_console = RemoteConsole(config)
    remote_console.main()

if __name__ == '__main__':
    main()
