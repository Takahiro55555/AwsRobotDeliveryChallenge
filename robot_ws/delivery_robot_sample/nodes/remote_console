#!/usr/bin/env python
# -*- coding: utf-8 -*-

from awsiot_client import Mqtt

import rospy
from std_msgs.msg import String
from nav_msgs.msg import OccupancyGrid, Odometry

import numpy as np

import os
import json
import yaml


class RemoteConsole():
    def __init__(self, config, mqtt_subscribe_topic_prefix='remote_console_to_tros',
                 mqtt_publish_topic_prefix='ros_to_remote_console'):
        self.__thing_name = config["thingName"]
        self.__mqtt_subscribe_topic_prefix = mqtt_subscribe_topic_prefix
        self.__mqtt_publish_topic_prefix = mqtt_publish_topic_prefix

        # AWS IoT Subscriber
        subscribe_cb_list = []
        subscribe_cb_list.append({"topic": self.__thing_name + "/remote_console_to_ros/buttons", "cb": self.__button_cb})
        self.__mqtt_client = Mqtt(config, subscribe_cb_list=subscribe_cb_list)

        # ROS Publisher
        self.__twugo_method_pub = rospy.Publisher('/twugo_method', String, queue_size=1)

        # ROS Subscriber
        self.__trimed_merged_costmap_sub = rospy.Subscriber(
            "/obstacle_detector/merged_costmap/trimed", OccupancyGrid, self.__trimed_merged_costmap_cb, queue_size=1)
        self.__trimed_merged_costmap_sub = rospy.Subscriber("/odom", Odometry, self.__odom_cb, queue_size=1)
        self.__map_graph_sub = rospy.Subscriber("/planner/map_graph", String, self.__map_graph_cb, queue_size=1)

        # AWS IoT には retain 機能が無いため、こちら側で最後に Publish したデータを保持しておく
        self.__trimed_merged_costmap_pub_data = None
        self.__odom_pub_data = None
        self.__map_graph_pub_data = None


    def main(self):
        rospy.spin()


    def __button_cb(self, client, userdata, message):
        data = {}
        data['payload'] = json.loads(message.payload)
        data['topic'] = message.topic
        payload = data['payload']

        if not "buttonName" in data['payload']:
            rospy.logwarn("RemoteConsole::__button_cb メッセージに 'buttonName' がありません。")
            return

        if payload["buttonName"] == "btn-stop":
            pub_data = json.dumps({"is_interrupted": True})
            self.__twugo_method_pub.publish(pub_data)
            rospy.loginfo("RemoteConsole::__button_cb btn-stop published: %s" % pub_data)

    def __trimed_merged_costmap_cb(self, data):
        h, w = data.info.height, data.info.width
        costmap_array = [[int(pix) for pix in row] for row in np.array(data.data, dtype='uint8').reshape(h, w)]

        # OccupancyGrid オブジェクトのままでは、JSON文字列に変換できないため辞書型に無理やり変換
        self.__trimed_merged_costmap_pub_data = dict(
            info = dict(
                height = h,
                width = w,
                resolution = data.info.resolution,
                origin = dict(
                    position = dict(
                        x = data.info.origin.position.x,
                        y = data.info.origin.position.y,
                        z = data.info.origin.position.z
                    ),
                    orientation = dict(
                        x = data.info.origin.orientation.x,
                        y = data.info.origin.orientation.y,
                        z = data.info.origin.orientation.z,
                        w = data.info.origin.orientation.w
                    )
                )
            ),
            data = costmap_array
        )
        pub_topic = "%s/%s/obstacle_detector/merged_costmap/trimed" % (self.__thing_name, self.__mqtt_publish_topic_prefix)
        self.__mqtt_client.mqtt_publish(self.__trimed_merged_costmap_pub_data, pub_topic)


    def __odom_cb(self, data):
        self.__odom_pub_data = dict(
            pose = dict(
                pose = dict(
                    position = dict(
                        x = data.pose.pose.position.x,
                        y = data.pose.pose.position.y,
                        z = data.pose.pose.position.z
                    ),
                    orientation = dict(
                        x = data.pose.pose.orientation.x,
                        y = data.pose.pose.orientation.y,
                        z = data.pose.pose.orientation.z,
                        w = data.pose.pose.orientation.w
                    )
                ),
                covariance = data.pose.covariance
            ),
            twist = dict(
                twist = dict(
                    linear = dict(
                        x = data.twist.twist.linear.x,
                        y = data.twist.twist.linear.y,
                        z = data.twist.twist.linear.z
                    ),
                    angular = dict(
                        x = data.twist.twist.angular.x,
                        y = data.twist.twist.angular.y,
                        z = data.twist.twist.angular.z
                    )
                ),
                covariance = data.twist.covariance
            )
        )
        pub_topic = "%s/%s/odom" % (self.__thing_name, self.__mqtt_publish_topic_prefix)
        self.__mqtt_client.mqtt_publish(self.__odom_pub_data, pub_topic)


    def __map_graph_cb(self, data):
        self.__map_graph_pub_data = data.data
        pub_topic = "%s/%s/planner/map_graph" % (self.__thing_name, self.__mqtt_publish_topic_prefix)
        self.__mqtt_client.mqtt_publish_str(self.__map_graph_pub_data, pub_topic)


def main():
    rospy.init_node('remote_console')

    # AWS IoT の設定を読み込む
    config = {}
    config_file = rospy.get_param("/aws_game_manager/aws_iot_config_file")
    if config_file == "use_default":
        config_file = rospy.get_param("/aws_game_manager/aws_iot_config_file_default")

    with open(config_file, 'r') as f:
        try:
            config = yaml.safe_load(f)
        except yaml.YAMLError as exc:
            rospy.logerr("[ERROR][remote_sonsole] yaml read error")
    config["configFilePath"] = os.path.dirname(config_file)

    remote_console = RemoteConsole(config)
    remote_console.main()

if __name__ == '__main__':
    main()
